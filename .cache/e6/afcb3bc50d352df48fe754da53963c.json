{"id":"node_modules/audiobuffer-to-wav/index.js","dependencies":[{"name":"/Volumes/Data/DOCUMENTS/_htdocs/mevishaslam.com/2019-no-framework/package.json","includedInParent":true,"mtime":1554370353000},{"name":"/Volumes/Data/DOCUMENTS/_htdocs/mevishaslam.com/2019-no-framework/node_modules/audiobuffer-to-wav/package.json","includedInParent":true,"mtime":1554368840000}],"generated":{"js":"module.exports = audioBufferToWav\nfunction audioBufferToWav (buffer, opt) {\n  opt = opt || {}\n\n  var numChannels = buffer.numberOfChannels\n  var sampleRate = buffer.sampleRate\n  var format = opt.float32 ? 3 : 1\n  var bitDepth = format === 3 ? 32 : 16\n\n  var result\n  if (numChannels === 2) {\n    result = interleave(buffer.getChannelData(0), buffer.getChannelData(1))\n  } else {\n    result = buffer.getChannelData(0)\n  }\n\n  return encodeWAV(result, format, sampleRate, numChannels, bitDepth)\n}\n\nfunction encodeWAV (samples, format, sampleRate, numChannels, bitDepth) {\n  var bytesPerSample = bitDepth / 8\n  var blockAlign = numChannels * bytesPerSample\n\n  var buffer = new ArrayBuffer(44 + samples.length * bytesPerSample)\n  var view = new DataView(buffer)\n\n  /* RIFF identifier */\n  writeString(view, 0, 'RIFF')\n  /* RIFF chunk length */\n  view.setUint32(4, 36 + samples.length * bytesPerSample, true)\n  /* RIFF type */\n  writeString(view, 8, 'WAVE')\n  /* format chunk identifier */\n  writeString(view, 12, 'fmt ')\n  /* format chunk length */\n  view.setUint32(16, 16, true)\n  /* sample format (raw) */\n  view.setUint16(20, format, true)\n  /* channel count */\n  view.setUint16(22, numChannels, true)\n  /* sample rate */\n  view.setUint32(24, sampleRate, true)\n  /* byte rate (sample rate * block align) */\n  view.setUint32(28, sampleRate * blockAlign, true)\n  /* block align (channel count * bytes per sample) */\n  view.setUint16(32, blockAlign, true)\n  /* bits per sample */\n  view.setUint16(34, bitDepth, true)\n  /* data chunk identifier */\n  writeString(view, 36, 'data')\n  /* data chunk length */\n  view.setUint32(40, samples.length * bytesPerSample, true)\n  if (format === 1) { // Raw PCM\n    floatTo16BitPCM(view, 44, samples)\n  } else {\n    writeFloat32(view, 44, samples)\n  }\n\n  return buffer\n}\n\nfunction interleave (inputL, inputR) {\n  var length = inputL.length + inputR.length\n  var result = new Float32Array(length)\n\n  var index = 0\n  var inputIndex = 0\n\n  while (index < length) {\n    result[index++] = inputL[inputIndex]\n    result[index++] = inputR[inputIndex]\n    inputIndex++\n  }\n  return result\n}\n\nfunction writeFloat32 (output, offset, input) {\n  for (var i = 0; i < input.length; i++, offset += 4) {\n    output.setFloat32(offset, input[i], true)\n  }\n}\n\nfunction floatTo16BitPCM (output, offset, input) {\n  for (var i = 0; i < input.length; i++, offset += 2) {\n    var s = Math.max(-1, Math.min(1, input[i]))\n    output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true)\n  }\n}\n\nfunction writeString (view, offset, string) {\n  for (var i = 0; i < string.length; i++) {\n    view.setUint8(offset + i, string.charCodeAt(i))\n  }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/audiobuffer-to-wav/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}}],"sources":{"node_modules/audiobuffer-to-wav/index.js":"module.exports = audioBufferToWav\nfunction audioBufferToWav (buffer, opt) {\n  opt = opt || {}\n\n  var numChannels = buffer.numberOfChannels\n  var sampleRate = buffer.sampleRate\n  var format = opt.float32 ? 3 : 1\n  var bitDepth = format === 3 ? 32 : 16\n\n  var result\n  if (numChannels === 2) {\n    result = interleave(buffer.getChannelData(0), buffer.getChannelData(1))\n  } else {\n    result = buffer.getChannelData(0)\n  }\n\n  return encodeWAV(result, format, sampleRate, numChannels, bitDepth)\n}\n\nfunction encodeWAV (samples, format, sampleRate, numChannels, bitDepth) {\n  var bytesPerSample = bitDepth / 8\n  var blockAlign = numChannels * bytesPerSample\n\n  var buffer = new ArrayBuffer(44 + samples.length * bytesPerSample)\n  var view = new DataView(buffer)\n\n  /* RIFF identifier */\n  writeString(view, 0, 'RIFF')\n  /* RIFF chunk length */\n  view.setUint32(4, 36 + samples.length * bytesPerSample, true)\n  /* RIFF type */\n  writeString(view, 8, 'WAVE')\n  /* format chunk identifier */\n  writeString(view, 12, 'fmt ')\n  /* format chunk length */\n  view.setUint32(16, 16, true)\n  /* sample format (raw) */\n  view.setUint16(20, format, true)\n  /* channel count */\n  view.setUint16(22, numChannels, true)\n  /* sample rate */\n  view.setUint32(24, sampleRate, true)\n  /* byte rate (sample rate * block align) */\n  view.setUint32(28, sampleRate * blockAlign, true)\n  /* block align (channel count * bytes per sample) */\n  view.setUint16(32, blockAlign, true)\n  /* bits per sample */\n  view.setUint16(34, bitDepth, true)\n  /* data chunk identifier */\n  writeString(view, 36, 'data')\n  /* data chunk length */\n  view.setUint32(40, samples.length * bytesPerSample, true)\n  if (format === 1) { // Raw PCM\n    floatTo16BitPCM(view, 44, samples)\n  } else {\n    writeFloat32(view, 44, samples)\n  }\n\n  return buffer\n}\n\nfunction interleave (inputL, inputR) {\n  var length = inputL.length + inputR.length\n  var result = new Float32Array(length)\n\n  var index = 0\n  var inputIndex = 0\n\n  while (index < length) {\n    result[index++] = inputL[inputIndex]\n    result[index++] = inputR[inputIndex]\n    inputIndex++\n  }\n  return result\n}\n\nfunction writeFloat32 (output, offset, input) {\n  for (var i = 0; i < input.length; i++, offset += 4) {\n    output.setFloat32(offset, input[i], true)\n  }\n}\n\nfunction floatTo16BitPCM (output, offset, input) {\n  for (var i = 0; i < input.length; i++, offset += 2) {\n    var s = Math.max(-1, Math.min(1, input[i]))\n    output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true)\n  }\n}\n\nfunction writeString (view, offset, string) {\n  for (var i = 0; i < string.length; i++) {\n    view.setUint8(offset + i, string.charCodeAt(i))\n  }\n}\n"},"lineCount":95}},"error":null,"hash":"33bd40d8760a274dda607f8daa8ab197","cacheData":{"env":{}}}